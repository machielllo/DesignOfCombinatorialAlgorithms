#+title: Python Code
#+author: M. L. Kroon, B. Aslan
#+startup: hidestars overview


* Classes

** Instance
Contains and reads data from .inst file.

How to structure data?

Calculate relevant things immediately?

 - valid customer for lockers
 - unreachable nodes from depot

** Solution
Writes out data to .sol file.

destroy operators -> return PartialSolution

Customers can likely be assigned to multiple lockers.

=self.locker_assignment: dict{<customer_id>: <locker_id>}= ?

From distance matrix it is easy to valid locker:
=np.argwhere(inst.distance[<customer_id>, <start_locker_id>:] < inst.locker_range)=

** PartialSolution
Somehow keep track of brokenness:
 - what customers have been removed
 - etc. 

repair operators -> return Solution


** Vehicles / Customers etc.
I think this is overkill...

Instance can have:
 - self.demands: dict[id, int]
 - self.service_time: dict[id, float]
 - self.deadline: dict[id, float]


 
* ALNS Framework

Function?

#+begin_src python

  def alns(sol: Solution, max_iter, max_time, init_temp, ...) -> sol: Solution:
      iteration = 0
      start_time = time.time()
      current_time = time.time()
      best_sol = sol.copy()
      weights = ?
      while iteration < max_iter and current_time - start_time < max_time:
	  repair_id, destroy_id = roulette_wheel(weights)
	  new_sol = sol.pick_destroy(repair_id).pick_destroy(destroy_id)
	  if new_sol.obj_val <= best_sol.obj_val:
	      best_sol = new_sol
	  if new_sol.obj_val <= sol.obj_val:
	      sol = new_sol
	  elif sim_crit(sol.obj_val, new_sol.obj_val, init_temp):
	      sol = new_sol
	  iteration += 1
	  update_temp() ?
	  update_weights() ?
	  current_time = time.time()
     return best_sol

#+end_src


* TODO Finalize V1 of Instance Class

* TODO Solution Class
